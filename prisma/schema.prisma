// FILE: prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Enums define a set of allowed values for a field
enum Role {
  ORPHANAGE
  ORGANIZATION
  ADMIN
}

enum EventStatus {
  PENDING
  APPROVED
  DECLINED
  COMPLETED
}

enum VisitPurpose {
  DONATION
  TEACHING
  WORKSHOP
  ONLINE_CLASS
  VOLUNTEERING
}

// The core User model for authentication
model User {
  id              String  @id @default(cuid())
  email           String  @unique
  passwordHash    String
  role            Role
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  orphanage       OrphanageProfile?
  organization    OrganizationProfile?
  sentMessages    Message[] @relation("Sender")
  receivedMessages Message[] @relation("Recipient")

  @@map("users")
}

enum VerificationStatus {
  UNVERIFIED
  PENDING
  VERIFIED
  REJECTED
}

model OrphanageProfile {
  id              String  @id @default(cuid())
  userId          String  @unique
  name            String
  description     String
  address         String
  latitude        Float?
  longitude       Float?
  phone           String?
  
  // --- UPDATED & NEW FIELDS ---
  profileImageUrl   String? // Changed from 'photos' to a single image URL
  directorName      String?
  registrationNumber String?
  legalDocumentsUrl String? // This will store the URL of an uploaded PDF/image
  verificationStatus VerificationStatus @default(UNVERIFIED)
  visitCount        Int     @default(0) // Track profile page visits
  score             Float   @default(0) // Calculated score based on visits, events, and engagement
  // --- END ---

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  needs           Need[]
  events          Event[]
  visits          Visit[]
  
  @@map("orphanage_profiles")
}

model OrganizationProfile {
  id                  String  @id @default(cuid())
  userId              String  @unique
  name                String
  contactPerson       String?
  phone               String?
  description         String?
  address             String?
  registrationNumber  String?
  profileImageUrl     String?
  purposes            String  // Stored as a JSON string of VisitPurpose enums

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  events          Event[]
  visits          Visit[]

  @@map("organization_profiles")
}

// A specific need listed by an orphanage
model Need {
  id              String   @id @default(cuid())
  orphanageId     String
  description     String
  status          String   @default("ACTIVE") // e.g., ACTIVE, FULFILLED
  createdAt       DateTime @default(now())

  // Relations
  orphanage       OrphanageProfile @relation(fields: [orphanageId], references: [id])

  @@map("needs")
}

// An event proposed by an organization to an orphanage
model Event {
  id              String      @id @default(cuid())
  organizationId  String
  orphanageId     String
  title           String
  description     String
  proposedDate    DateTime
  status          EventStatus @default(PENDING)
  createdAt       DateTime    @default(now())

  // Relations
  organization    OrganizationProfile @relation(fields: [organizationId], references: [id])
  orphanage       OrphanageProfile    @relation(fields: [orphanageId], references: [id])
  
  @@map("events")
}

// A log of a completed visit
model Visit {
  id              String       @id @default(cuid())
  organizationId  String
  orphanageId     String
  visitDate       DateTime
  purpose         VisitPurpose
  notes           String?
  createdAt       DateTime     @default(now())

  // Relations
  organization    OrganizationProfile @relation(fields: [organizationId], references: [id])
  orphanage       OrphanageProfile    @relation(fields: [orphanageId], references: [id])
  
  @@map("visits")
}

// A message between two users
model Message {
  id          String   @id @default(cuid())
  senderId    String
  recipientId String
  content     String
  createdAt   DateTime @default(now())
  isRead      Boolean  @default(false)

  // Relations
  sender      User     @relation("Sender", fields: [senderId], references: [id])
  recipient   User     @relation("Recipient", fields: [recipientId], references: [id])
  
  @@map("messages")
}